pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/trivy:/usr/bin/trivy'
        }
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the repository...'
                // Uncomment below line to use the actual Git repo
                // git branch: 'main', url: 'https://github.com/Tushar8117/Jenkins-pipeline'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://13.202.211.212:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "tushar8117/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Container Vulnerability Scan') {
            steps {
                script {
                    sh "trivy image tushar8117/ultimate-cicd:${BUILD_NUMBER} > trivy-report.txt"
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-pipeline"
                GIT_USER_NAME = "Tushar8117"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "tushardeshmukh8117@gmail.com"
                        git config user.name "Tushar8117"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'trivy-report.txt', allowEmptyArchive: true
        }
        success {
            script {
                def sonarProjectURL = "${env.SONAR_URL}/dashboard?id=spring-boot-demo" // Replace with your actual SonarQube project key

                slackSend(
                    channel: '#jenkins',
                    color: 'good',
                    message: """
*Build #${env.BUILD_NUMBER}* - *Success* :white_check_mark:
- SonarQube Report: <${sonarProjectURL}|View Report>
- Trivy Report: Artifact is available in Jenkins
""",
                    tokenCredentialId: 'slack-id' // Replace with your Slack bot token credential ID
                )
            }
        }
        failure {
            slackSend(
                channel: '#jenkins',
                color: 'danger',
                message: """
*Build #${env.BUILD_NUMBER}* - *Failed* :x:
- Please check Jenkins logs for details.
- Check Trivy report in attached artifact.
""",
                tokenCredentialId: 'slack-id' // Replace with your Slack bot token credential ID
            )
        }
    }
}
